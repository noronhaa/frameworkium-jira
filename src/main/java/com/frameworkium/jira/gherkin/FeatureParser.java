package com.frameworkium.jira.gherkin;

import com.frameworkium.jira.api.Issue;
import com.frameworkium.jira.api.NewIssue;
import gherkin.AstBuilder;
import gherkin.Parser;
import gherkin.ast.GherkinDocument;
import gherkin.pickles.Pickle;
import gherkin.pickles.Compiler;
import gherkin.pickles.PickleStep;
import gherkin.pickles.PickleTag;
import lombok.Data;
import lombok.Getter;
import org.apache.commons.io.FileUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * Class to parse a feature and sync all data with Zephyr, the feature is the source of truth
 * - Check test is in zephyr by looking for tag
 * - Add new test to zephyr if needed
 * - Update existing zephyr test to latest version
 */
public class FeatureParser {
    private static final Logger logger = LogManager.getLogger();


    private static final String ZEPHYR_TAG_PREFIX = "@TestCaseId:";
    private static final String SCENARIO_KEYWORD = "Scenario:";
    private static final String NEW_LINE = "\n";
    private static final String INDENTATION = "  ";

    private String featurePath;

    @Getter
    private List<Pickle> pickles;

    public FeatureParser(String featurePath) {
        this.featurePath = featurePath;
        pickles = parse();
    }




    private List<Pickle> parse(){
        String feature = com.frameworkium.jira.FileUtils.readFile(this.featurePath);
        Parser<GherkinDocument> parser = new Parser<>(new AstBuilder());
        GherkinDocument gherkinDocument = parser.parse(feature);
        List<Pickle> pickles = new Compiler().compile(gherkinDocument);
        return pickles;
    }

    //todo update zephyr for tests that pickleHasZephyrTag == true
    public void syncWithZephyr(){
        this.pickles.stream()
                .filter(pickle1 -> !pickleHasZephyrTag(pickle1))
                .forEach(pickle -> {
                    String zId = addTestToZephyr(pickle);
                    addTagsToScenario(pickle, zId);
                });

    }


    /**
     * Check each tag for a zephyr tag checking it contains @TestCaseId:<zephyr tag> then query zephyr to check tag exists
     * @param pickle
     * @return
     */
    private boolean pickleHasZephyrTag(Pickle pickle){
        return new GherkinUtils().pickleHasZephyrTag(pickle.getTags());
    }


    private String addTestToZephyr(Pickle pickle) {

        String scenarioTitle = pickle.getName();
        String scenarioSteps = pickle.getSteps().stream()
                .map(PickleStep::getText)
                .map(step -> step + "\n")
                .collect(Collectors.joining(","))
                .replace(",","");
        String description = "Test Generated By frameworkium-jira (automation)";

        return new NewIssue("TP",scenarioTitle,description,NewIssue.IssueType.TEST,scenarioSteps).create();
    }


    public void updateZephyrTest(){
        //todo put request to push/update existing source bdd into zephyr
        //update title
        //update bdd section
        //possibly just reuse some of create(Pickle pickle)
    }

    /**
     * Adds a tag to a Scenario in a feature file
     * 1 - Reads feature file as a stream
     * 2 - for each line will look to match with the issueType of the scenario
     * 3 - replace that line with a line with the tag followed by original scenario line
     * 4 - transform stream of strings to bytes
     * 5 - write bytes to original file (overwrite)
     * @param pickle aka scenario you want to update
     * @param zephyrId ID of Zephyr test
     */
    public void addTagsToScenario(Pickle pickle, String zephyrId){
        String tag = ZEPHYR_TAG_PREFIX + zephyrId;
        String scenarioNameToUpdate = pickle.getName();

        //regex to match: (any number of white space)Scenario:(0 or 1 whitespace)(issueType of scenario)
        String scenarioTitle = String.format("( *)%s( ?)%s",SCENARIO_KEYWORD, scenarioNameToUpdate);
        String scenarioLine = INDENTATION + SCENARIO_KEYWORD + " " + scenarioNameToUpdate;
        File file = new File(this.featurePath);
        String fileContext = null;

        try {
            fileContext = FileUtils.readFileToString(file);
            fileContext = fileContext.replaceAll(scenarioTitle,
                     INDENTATION + tag + NEW_LINE + scenarioLine);
            FileUtils.write(file, fileContext);
        } catch (IOException e) {
            e.printStackTrace();
        }

    }


}
